// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ValueFilterComparator is documented here http://hl7.org/fhir/ValueSet/value-filter-comparator
type ValueFilterComparator int

const (
	ValueFilterComparatorEq ValueFilterComparator = iota
	ValueFilterComparatorNe
	ValueFilterComparatorGt
	ValueFilterComparatorLt
	ValueFilterComparatorGe
	ValueFilterComparatorLe
	ValueFilterComparatorSa
	ValueFilterComparatorEb
	ValueFilterComparatorAp
)

func (code ValueFilterComparator) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ValueFilterComparator) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "eq":
		*code = ValueFilterComparatorEq
	case "ne":
		*code = ValueFilterComparatorNe
	case "gt":
		*code = ValueFilterComparatorGt
	case "lt":
		*code = ValueFilterComparatorLt
	case "ge":
		*code = ValueFilterComparatorGe
	case "le":
		*code = ValueFilterComparatorLe
	case "sa":
		*code = ValueFilterComparatorSa
	case "eb":
		*code = ValueFilterComparatorEb
	case "ap":
		*code = ValueFilterComparatorAp
	default:
		return fmt.Errorf("unknown ValueFilterComparator code `%s`", s)
	}
	return nil
}
func (code ValueFilterComparator) String() string {
	return code.Code()
}
func (code ValueFilterComparator) Code() string {
	switch code {
	case ValueFilterComparatorEq:
		return "eq"
	case ValueFilterComparatorNe:
		return "ne"
	case ValueFilterComparatorGt:
		return "gt"
	case ValueFilterComparatorLt:
		return "lt"
	case ValueFilterComparatorGe:
		return "ge"
	case ValueFilterComparatorLe:
		return "le"
	case ValueFilterComparatorSa:
		return "sa"
	case ValueFilterComparatorEb:
		return "eb"
	case ValueFilterComparatorAp:
		return "ap"
	}
	return "<unknown>"
}
func (code ValueFilterComparator) Display() string {
	switch code {
	case ValueFilterComparatorEq:
		return "Equals"
	case ValueFilterComparatorNe:
		return "Not Equals"
	case ValueFilterComparatorGt:
		return "Greater Than"
	case ValueFilterComparatorLt:
		return "Less Than"
	case ValueFilterComparatorGe:
		return "Greater or Equals"
	case ValueFilterComparatorLe:
		return "Less of Equal"
	case ValueFilterComparatorSa:
		return "Starts After"
	case ValueFilterComparatorEb:
		return "Ends Before"
	case ValueFilterComparatorAp:
		return "Approximately"
	}
	return "<unknown>"
}
func (code ValueFilterComparator) Definition() string {
	switch code {
	case ValueFilterComparatorEq:
		return "the value for the parameter in the resource is equal to the provided value."
	case ValueFilterComparatorNe:
		return "the value for the parameter in the resource is not equal to the provided value."
	case ValueFilterComparatorGt:
		return "the value for the parameter in the resource is greater than the provided value."
	case ValueFilterComparatorLt:
		return "the value for the parameter in the resource is less than the provided value."
	case ValueFilterComparatorGe:
		return "the value for the parameter in the resource is greater or equal to the provided value."
	case ValueFilterComparatorLe:
		return "the value for the parameter in the resource is less or equal to the provided value."
	case ValueFilterComparatorSa:
		return "the value for the parameter in the resource starts after the provided value."
	case ValueFilterComparatorEb:
		return "the value for the parameter in the resource ends before the provided value."
	case ValueFilterComparatorAp:
		return "the value for the parameter in the resource is approximately the same to the provided value."
	}
	return "<unknown>"
}
